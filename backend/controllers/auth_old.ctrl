/* --- User controllers File --- */

//Call the sauce model
const userModel = require('../models/User.model');

//Call modules
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');



//Signup new user
exports.signup = (req, res, next) => {
	//Function to create a specific displayName according to the email
	const initiateDisplayName = (emailReceived) => {
		const initialName = emailReceived.split('@')[0];
		if (initialName.includes('.')){
			const firstPart = initialName.split('.')[0];
			const secondPart = initialName.split('.')[1];
			const firstName = firstPart.charAt(0).toUpperCase() + firstPart.slice(1);
			const lastName = secondPart.charAt(0).toUpperCase() + secondPart.slice(1);
			return `${firstName} ${lastName}`
		}
		else return initialName.charAt(0).toUpperCase() + initialName.slice(1);
	} 
    //Hash the password sent from the user
    bcrypt.hash(req.body.password, 10)
        .then(hash => {
            //Create a new user into the database
            const user = new userModel({
                email: req.body.email,
                password: hash, //Send the hashed password the DB
				displayName: initiateDisplayName(req.body.email)
            });
            user.save()
                .then(() => res.status(201).json({ message: 'Compte d\'utilisateur créé !' }))
                .catch(error => res.status(422).json({ error }));
        })
        .catch(error => res.status(500).json({ error }));
};

//Login users
exports.signin = (req, res, next) => {
    userModel.findOne({ email: req.body.email })
        .then(user => {
            if (!user) {
                return res.status(401).json({ error: 'Compte non trouvé !' });
            }
            //Compare the hashed passwords
            bcrypt.compare(req.body.password, user.password)
                .then(valid => {
                    if (!valid) {
                        return res.status(401).json({ error: 'Mot de passe incorrect !' });
                    }
                    else{
                    //Define a token + cookie to keep the user log on
					res.cookie('jwt', token, {httpOnly : true, maxAge: 1 * 60 * 1000});
                    res.status(200).json({
                        userId: user._id,
                        token: jwt.sign(
                            { userId: user._id },
                            process.env.RANDOMSTRING,
                            { expiresIn: 1 * 60 * 1000 }
                        )
                    });
                }
                })
                .catch(error => res.status(500).json({ error }));
        })
        .catch(error => res.status(500).json({ error }));
};

exports.signout = (req, res, next) => {
	console.log('test')
}